---
description: 
globs: 
alwaysApply: true
---
# 파이썬 클린 코드 컨벤션

이 문서는 파이썬 프로젝트의 코드 품질, 가독성, 유지보수성을 향상시키기 위한 주요 클린 코드 컨벤션을 안내합니다.

## 1. 명명 규칙 (Naming Conventions)

*   **변수 (Variables)**: `snake_case`를 사용합니다. (예: `user_input`, `item_count`)
*   **함수 (Functions)**: `snake_case`를 사용합니다. (예: `calculate_total_price()`, `get_user_data()`)
*   **클래스 (Classes)**: `CapWords` (PascalCase)를 사용합니다. (예: `UserProfile`, `OrderDetails`)
*   **모듈 (Modules)**: 짧고, 모두 소문자인 `snake_case`를 사용합니다. (예: `data_handler.py`, `utils.py`)
*   **상수 (Constants)**: 모두 대문자인 `SNAKE_CASE`를 사용합니다. (예: `MAX_CONNECTIONS`, `DEFAULT_TIMEOUT`)
*   **내부 사용 목적의 변수/함수**: 밑줄 한 개로 시작합니다. (예: `_internal_value`, `_helper_function()`)
*   **매직 메소드 (dunder methods)**: 이름 앞뒤로 밑줄 두 개를 사용합니다. (예: `__init__`, `__str__`) 이 형식은 직접 만들지 않고, 파이썬 내장 기능을 확장할 때만 사용합니다.

## 2. PEP 8 스타일 가이드 준수

[PEP 8 -- Style Guide for Python Code](mdc:https:/www.python.org/dev/peps/pep-0008)는 파이썬 코드의 일관성을 위한 핵심 가이드입니다. 주요 내용은 다음과 같습니다:

*   **들여쓰기 (Indentation)**: 공백 4칸을 사용합니다. 탭은 사용하지 않습니다.
*   **최대 줄 길이 (Maximum Line Length)**: 한 줄은 79자 (주석은 72자)를 넘지 않도록 합니다. 코드 편집기의 가이드라인을 활용하세요.
*   **빈 줄 (Blank Lines)**:
    *   최상위 함수와 클래스 정의는 두 줄씩 띄웁니다.
    *   클래스 내의 메소드 정의는 한 줄씩 띄웁니다.
    *   함수 내에서는 논리적인 구분을 위해 적절히 빈 줄을 사용합니다.
*   **임포트 (Imports)**:
    *   임포트는 항상 파일 맨 위에 작성합니다.
    *   표준 라이브러리, 서드파티 라이브러리, 로컬 애플리케이션/라이브러리 순으로 그룹화하고, 각 그룹 사이에 빈 줄을 둡니다.
    *   절대 경로 임포트를 사용합니다. (예: `from my_package.my_module import my_class`)
    *   와일드카드 임포트 (`from module import *`)는 피합니다.
*   **코드 주변의 공백 (Whitespace in Expressions and Statements)**:
    *   괄호 안, 쉼표/콜론/세미콜론 앞에는 공백을 사용하지 않습니다.
    *   쉼표/콜론/세미콜론 뒤에는 공백을 사용합니다 (단, 슬라이싱에서 콜론 양쪽은 붙임).
    *   할당 연산자 (`=`), 비교 연산자 (`==`, `<`, `>`), 산술 연산자 (`+`, `-`, `*`, `/`) 양쪽에 공백을 하나씩 둡니다.
    *   함수 호출 시 괄호 바로 안, 함수 정의 시 매개변수 기본값 할당 연산자 주변에는 공백을 사용하지 않습니다.
*   **주석 (Comments)**:
    *   코드와 일치하도록 항상 최신 상태를 유지합니다.
    *   명확하고 간결하게 작성합니다.
    *   불필요한 주석(코드를 그대로 설명하는 주석)은 피합니다. "왜" 그렇게 했는지 설명하는 주석이 좋습니다.
    *   블록 주석은 `#` 다음에 공백 하나를 두고 시작하며, 해당 코드 블록과 같은 수준으로 들여쓰기합니다.
    *   인라인 주석은 코드와 최소 두 칸 이상 띄우고 `#` 다음에 공백 하나를 두고 작성합니다.

## 3. 문서화 문자열 (Docstrings)

*   모든 공개 모듈, 함수, 클래스, 메소드에는 Docstring을 작성합니다.
*   Docstring은 해당 객체가 "무엇을" 하는지 설명합니다.
*   PEP 257 ([PEP 257 -- Docstring Conventions](mdc:https:/www.python.org/dev/peps/pep-0257))을 따릅니다.
*   첫 줄은 간결한 요약으로, 마침표로 끝납니다.
*   필요시, 빈 줄 다음에 상세 설명을 추가합니다.
*   함수나 메소드의 경우, 인자(Args), 반환값(Returns), 발생 가능한 예외(Raises) 등을 명시하는 것이 좋습니다. (예: Google 스타일, reStructuredText 스타일 등)

   '''python
   def example_function(param1, param2):
       """요약: 이 함수는 무엇을 하는가.

       상세 설명 (필요한 경우).

       Args:
           param1 (type): param1 설명.
           param2 (type): param2 설명.

       Returns:
           type: 반환값 설명.
       """
       # ... 함수 본문 ...
       return True
   '''

## 4. 타입 힌팅 (Type Hinting)

*   코드의 가독성과 정적 분석 도구의 활용을 위해 타입 힌트를 적극적으로 사용합니다. ([PEP 484 -- Type Hints](mdc:https:/www.python.org/dev/peps/pep-0484))
*   변수, 함수/메소드의 매개변수 및 반환 타입에 힌트를 추가합니다.
*   `typing` 모듈의 타입을 활용합니다. (예: `List`, `Dict`, `Tuple`, `Optional`, `Any`)

   '''python
   from typing import List, Optional

   def greet(name: str, items: List[str]) -> Optional[str]:
       if not name:
           return None
       return f"Hello {name}, you have {len(items)} items."
   '''

## 5. 코드 구조 및 가독성

*   **함수는 한 가지 일만 잘 하도록 작성 (Single Responsibility Principle)**: 함수가 너무 많은 일을 하거나 길어지면 분리하는 것을 고려합니다. 일반적으로 함수는 화면에 다 보일 정도의 길이(예: 30-50줄 이내)를 유지하는 것이 좋습니다.
*   **복잡한 표현식 지양**: 가독성을 해치는 복잡한 리스트 컴프리헨션이나 삼항 연산자 사용은 피하고, 필요시 여러 줄로 나누거나 일반 `for`문, `if-else`문으로 풀어씁니다.
*   **매직 넘버 (Magic Numbers) 사용 금지**: 코드에 직접 나타나는 의미를 알 수 없는 숫자 대신, 의미 있는 이름을 가진 상수로 정의하여 사용합니다.
*   **중첩 최소화**: `if`, `for`, `while` 문의 과도한 중첩은 가독성을 떨어뜨립니다. 가능하면 중첩 깊이를 줄이도록 리팩토링합니다. (예: Guard Clause 사용, 함수 분리)
*   **명시적인 것이 암묵적인 것보다 낫다 (Explicit is better than implicit)**: 코드의 동작이 명확하게 드러나도록 작성합니다.
*   **에러 처리**: `try-except` 블록을 사용하여 예상되는 예외를 적절히 처리합니다. 너무 광범위한 `except Exception:` 이나 `except:` 만 사용하는 것은 피하고, 구체적인 예외 타입을 명시합니다. 오류 발생 시 사용자나 개발자에게 유용한 정보를 제공합니다.

## 6. 일반 원칙

*   **DRY (Don't Repeat Yourself)**: 반복되는 코드는 함수나 클래스로 만들어 재사용성을 높입니다.
*   **KISS (Keep It Simple, Stupid)**: 가능한 한 간단하고 명료하게 코드를 작성합니다. 불필요한 복잡성은 피합니다.
*   **YAGNI (You Ain't Gonna Need It)**: 현재 필요하지 않은 기능은 미리 구현하지 않습니다.
*   **지속적인 리팩토링**: 코드 품질을 유지하고 개선하기 위해 주기적으로 코드를 검토하고 리팩토링합니다.

이 가이드라인을 따르면 더 깨끗하고 이해하기 쉬우며 유지보수하기 좋은 파이썬 코드를 작성하는 데 도움이 될 것입니다.

