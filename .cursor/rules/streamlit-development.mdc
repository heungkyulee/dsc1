---
description: 
globs: 
alwaysApply: true
---
# Streamlit 개발 가이드라인

## 앱 구조 설계 원칙

### 메인 앱 구성 ([app.py](mdc:app.py))
```python
# 필수 구조
import streamlit as st
from typing import Dict, List, Optional

# 페이지 설정
st.set_page_config(page_title="K-Startup 지원사업 관리", layout="wide")

# 사이드바 네비게이션
def main():
    st.sidebar.title("메뉴")
    page = st.sidebar.selectbox("페이지 선택", [
        "대시보드",
        "신규 지원사업 생성", 
        "지원사업 검색 및 필터링",
        "챗봇"
    ])
```

## 페이지별 개발 가이드

### 1. 대시보드 페이지 (Print 기능)
- **목적**: 데이터 시각화 및 통계 표시
- **구성요소**:
  - 전체 지원사업 수 메트릭
  - 기관별 분포 차트
  - 마감임박 공고 리스트
  - 최신 업데이트 정보

```python
def show_dashboard():
    st.title("📊 대시보드")
    
    # 메트릭 표시
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("전체 지원사업", total_count)
    # ... 추가 메트릭
    
    # 차트 표시
    st.plotly_chart(create_category_chart())
```

### 2. 신규 지원사업 생성 페이지 (Create)
- **목적**: 새로운 지원사업 정보 입력
- **필수 입력 필드**: 제목, 기관, 설명, 마감일, 분야
- **검증**: 모든 필수 필드 입력 확인

```python
def show_create_page():
    st.title("➕ 신규 지원사업 생성")
    
    with st.form("create_announcement"):
        title = st.text_input("지원사업 제목*", placeholder="제목을 입력하세요")
        organization = st.selectbox("주관기관*", get_organizations())
        # ... 추가 필드
        
        if st.form_submit_button("생성"):
            # 검증 및 저장 로직
            pass
```

### 3. 검색 및 필터링 페이지 (Retrieve, Update, Delete)
- **검색 기능**: 키워드, 기관, 분야별 검색
- **필터링**: 상태, 마감일, 예산 범위
- **카드 형태 표시**: 각 지원사업을 카드로 표시
- **인라인 수정/삭제**: 카드 클릭 시 수정/삭제 모달

```python
def show_search_page():
    st.title("🔍 지원사업 검색 및 관리")
    
    # 검색 및 필터 섹션
    search_query = st.text_input("검색어")
    filters = create_filter_sidebar()
    
    # 결과 표시
    results = search_announcements(search_query, filters)
    display_announcement_cards(results)
```

### 4. 챗봇 페이지 (RAG 기능)
- **Pinecone 벡터 검색**: 지원사업 정보 임베딩
- **대화형 인터페이스**: 질문-답변 형태
- **컨텍스트 표시**: 참조된 지원사업 정보 표시

```python
def show_chatbot_page():
    st.title("🤖 지원사업 상담 챗봇")
    
    # 채팅 기록 표시
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.write(message["content"])
    
    # 사용자 입력
    if prompt := st.chat_input("지원사업에 대해 질문하세요"):
        # RAG 처리 로직
        response = get_rag_response(prompt)
        st.chat_message("assistant").write(response)
```

## UI/UX 가이드라인

### 색상 및 테마
- 주 색상: 한국창업진흥원 브랜드 색상 활용
- 성공: 초록색 (#28a745)
- 경고: 주황색 (#ffc107)  
- 에러: 빨간색 (#dc3545)

### 상호작용 요소
- **버튼**: 명확한 액션 명시 ("저장", "삭제", "수정")
- **폼**: 필수 필드 표시 (*)
- **로딩**: 진행 상태 표시
- **에러**: 사용자 친화적 메시지

### 반응형 레이아웃
- 컬럼 활용으로 화면 효율성 증대
- 모바일 친화적 디자인
- 사이드바 활용한 네비게이션

## 성능 최적화

### 세션 상태 관리
```python
# 초기화
if 'announcements' not in st.session_state:
    st.session_state.announcements = load_announcements()

# 캐싱 활용
@st.cache_data
def load_data_from_file(filename: str):
    return load_json_file(filename)
```

### 데이터 캐싱
- `@st.cache_data`: 데이터 로딩 함수
- `@st.cache_resource`: 모델/연결 객체
- TTL 설정으로 데이터 신선도 유지

## 에러 처리 및 사용자 경험

### 예외 처리
```python
try:
    result = perform_operation()
    st.success("작업이 완료되었습니다.")
except Exception as e:
    st.error(f"오류가 발생했습니다: {str(e)}")
    logger.error(f"Operation failed: {e}")
```

### 사용자 피드백
- 성공/실패 메시지 명확히 표시
- 진행 상황 표시 (progress bar)
- 확인 대화상자 (삭제 등 중요 작업)

이 가이드라인을 따라 일관되고 사용자 친화적인 Streamlit 애플리케이션을 개발하세요.

